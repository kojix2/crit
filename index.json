{"repository_name":"crit","body":"# Crit\n\n[![test](https://github.com/kojix2/crit/actions/workflows/test.yml/badge.svg)](https://github.com/kojix2/crit/actions/workflows/test.yml)\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\nA lightweight Git repository hosting server built with Crystal.\n\nFor detailed information, please see [DETAILS.md](./DETAILS.md).\n\n## License\n\n[MIT](./LICENSE)\n","program":{"html_id":"crit/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"crit","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"crit/Crit","path":"Crit.html","kind":"module","full_name":"Crit","name":"Crit","abstract":false,"locations":[{"filename":"config/config.cr","line_number":2,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/config/config.cr#L2"},{"filename":"src/helpers/auth.cr","line_number":5,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/helpers/auth.cr#L5"},{"filename":"src/helpers/cgi_helper.cr","line_number":6,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/helpers/cgi_helper.cr#L6"},{"filename":"src/models/repository.cr","line_number":5,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/models/repository.cr#L5"},{"filename":"src/routes/git.cr","line_number":5,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/routes/git.cr#L5"},{"filename":"src/routes/web.cr","line_number":7,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/routes/web.cr#L7"},{"filename":"src/services/repo_service.cr","line_number":5,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/services/repo_service.cr#L5"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"doc":"Configuration values and environment variable management","summary":"<p>Configuration values and environment variable management</p>","types":[{"html_id":"crit/Crit/Helpers","path":"Crit/Helpers.html","kind":"module","full_name":"Crit::Helpers","name":"Helpers","abstract":false,"locations":[{"filename":"src/helpers/auth.cr","line_number":6,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/helpers/auth.cr#L6"},{"filename":"src/helpers/cgi_helper.cr","line_number":7,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/helpers/cgi_helper.cr#L7"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"crit/Crit","kind":"module","full_name":"Crit","name":"Crit"},"types":[{"html_id":"crit/Crit/Helpers/Auth","path":"Crit/Helpers/Auth.html","kind":"module","full_name":"Crit::Helpers::Auth","name":"Auth","abstract":false,"locations":[{"filename":"src/helpers/auth.cr","line_number":7,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/helpers/auth.cr#L7"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"crit/Crit/Helpers","kind":"module","full_name":"Crit::Helpers","name":"Helpers"},"class_methods":[{"html_id":"setup_basic_auth-class-method","name":"setup_basic_auth","abstract":false,"location":{"filename":"src/helpers/auth.cr","line_number":8,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/helpers/auth.cr#L8"},"def":{"name":"setup_basic_auth","visibility":"Public","body":"basic_auth(Crit::Config::USERNAME, Crit::Config::PASSWORD)"},"external_var":false}]},{"html_id":"crit/Crit/Helpers/CGI","path":"Crit/Helpers/CGI.html","kind":"module","full_name":"Crit::Helpers::CGI","name":"CGI","abstract":false,"locations":[{"filename":"src/helpers/cgi_helper.cr","line_number":12,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/helpers/cgi_helper.cr#L12"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(self)","doc":"Set up a dedicated logger for CGI operations","summary":"<p>Set up a dedicated logger for CGI operations</p>"}],"namespace":{"html_id":"crit/Crit/Helpers","kind":"module","full_name":"Crit::Helpers","name":"Helpers"},"doc":"CGI helper module for git-http-backend integration\n\nThis module provides functionality to handle Git HTTP protocol\nby interfacing with git-http-backend CGI script.","summary":"<p>CGI helper module for git-http-backend integration</p>","class_methods":[{"html_id":"extract_username_from_auth_header(env)-class-method","name":"extract_username_from_auth_header","doc":"Extracts username from HTTP Authorization header\n\n@param env [HTTP::Server::Context] The HTTP context\n@return [String, Nil] The extracted username or nil if not found","summary":"<p>Extracts username from HTTP Authorization header</p>","abstract":false,"args":[{"name":"env","external_name":"env","restriction":""}],"args_string":"(env)","args_html":"(env)","location":{"filename":"src/helpers/cgi_helper.cr","line_number":20,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/helpers/cgi_helper.cr#L20"},"def":{"name":"extract_username_from_auth_header","args":[{"name":"env","external_name":"env","restriction":""}],"visibility":"Public","body":"auth_header = env.request.headers[\"Authorization\"]?\nif auth_header\nelse\n  return nil\nend\n\nif auth_header.starts_with?(\"Basic \")\n  base64 = auth_header.sub(\"Basic \", \"\")\n  begin\n    decoded = Base64.decode_string(base64)\n    username, _ = decoded.split(\":\", 2)\n    return username\n  rescue ex\n    Log.error do \"Failed to decode authorization header: #{ex.message}\" end\n    return nil\n  end\nend\n\nnil\n"},"external_var":false},{"html_id":"prepare_cgi_env(env,name,path_info)-class-method","name":"prepare_cgi_env","doc":"Prepares CGI environment variables for git-http-backend\n\n@param env [HTTP::Server::Context] The HTTP context\n@param name [String] Repository name\n@param path_info [String] Path info part of the URL\n@return [Hash(String, String)] CGI environment variables","summary":"<p>Prepares CGI environment variables for git-http-backend</p>","abstract":false,"args":[{"name":"env","external_name":"env","restriction":""},{"name":"name","external_name":"name","restriction":""},{"name":"path_info","external_name":"path_info","restriction":""}],"args_string":"(env, name, path_info)","args_html":"(env, name, path_info)","location":{"filename":"src/helpers/cgi_helper.cr","line_number":45,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/helpers/cgi_helper.cr#L45"},"def":{"name":"prepare_cgi_env","args":[{"name":"env","external_name":"env","restriction":""},{"name":"name","external_name":"name","restriction":""},{"name":"path_info","external_name":"path_info","restriction":""}],"visibility":"Public","body":"repo_name = name.ends_with?(\".git\") ? name : \"#{name}.git\"\nrepo_path = File.expand_path(File.join(Crit::Config::REPO_ROOT, repo_name))\n\nLog.debug do \"CGI env preparation\" end\nLog.debug do \"name=#{name}, repo_name=#{repo_name}, path_info=#{path_info}\" end\nLog.debug do \"repo_path=#{repo_path}\" end\nLog.debug do \"request_path=#{env.request.path}\" end\nLog.debug do \"request_method=#{env.request.method}\" end\n\n{\"GIT_PROJECT_ROOT\" => File.expand_path(Crit::Config::REPO_ROOT), \"GIT_HTTP_EXPORT_ALL\" => \"1\", \"PATH_INFO\" => \"/#{repo_name}#{path_info}\", \"REQUEST_METHOD\" => env.request.method, \"QUERY_STRING\" => env.request.query || \"\", \"CONTENT_TYPE\" => env.request.headers[\"Content-Type\"]? || \"\", \"REMOTE_USER\" => (extract_username_from_auth_header(env)) || \"\", \"REMOTE_ADDR\" => (env.request.remote_address.try(&.to_s) || \"\"), \"AUTH_TYPE\" => \"Basic\", \"SERVER_PROTOCOL\" => env.request.version, \"REQUEST_URI\" => env.request.resource, \"GATEWAY_INTERFACE\" => \"CGI/1.1\", \"SERVER_PORT\" => (ENV[\"PORT\"]? || \"3000\"), \"SERVER_NAME\" => env.request.headers[\"Host\"]? || \"\"}\n"},"external_var":false},{"html_id":"run_git_http_backend(env,cgi_env)-class-method","name":"run_git_http_backend","doc":"Runs git-http-backend CGI script\n\n@param env [HTTP::Server::Context] The HTTP context\n@param cgi_env [Hash(String, String)] CGI environment variables\n@return [String] Empty string on success, error message on failure","summary":"<p>Runs git-http-backend CGI script</p>","abstract":false,"args":[{"name":"env","external_name":"env","restriction":""},{"name":"cgi_env","external_name":"cgi_env","restriction":""}],"args_string":"(env, cgi_env)","args_html":"(env, cgi_env)","location":{"filename":"src/helpers/cgi_helper.cr","line_number":79,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/helpers/cgi_helper.cr#L79"},"def":{"name":"run_git_http_backend","args":[{"name":"env","external_name":"env","restriction":""},{"name":"cgi_env","external_name":"cgi_env","restriction":""}],"visibility":"Public","body":"Log.debug do \"Running git-http-backend\" end\n\n\n\nLog.debug do \"CGI environment:\" end\ncgi_env.each do |key, value|\n  Log.debug do \"  #{key}=#{value}\" end\nend\n\nio = IO::Memory.new\nstatus = Process.run(\"git\", [\"http-backend\"], input: (env.request.body || Process::Redirect::Close), output: io, env: cgi_env)\n\nLog.debug do \"git-http-backend exit status: #{status.exit_code}\" end\n\nio.rewind\nraw = io.gets_to_end\nLog.debug do \"git-http-backend raw output length: #{raw.size}\" end\n\nif raw.empty?\n  Log.error do \"git-http-backend returned empty response\" end\n  env.response.status_code = 500\n  return \"Internal Server Error: git-http-backend returned empty response\"\nend\n\nbegin\n  header, body = raw.split(\"\\r\\n\\r\\n\", 2)\n  Log.debug do \"git-http-backend header length: #{header.size}\" end\n  Log.debug do \"git-http-backend body length: #{body.size}\" end\n\n  header.lines.each do |line|\n    Log.debug do \"Header line: #{line}\" end\n    if m = line.match(/^([A-Za-z0-9\\-]+):\\s*(.+)$/)\n      env.response.headers[m[1]] = m[2]\n      Log.debug do \"Set response header #{m[1]}=#{m[2]}\" end\n    end\n  end\n  env.response.print(body)\nrescue ex\n  Log.error do \"Error processing git-http-backend response: #{ex.message}\" end\n  env.response.status_code = 500\n  return \"Internal Server Error: #{ex.message}\"\nend\n\n\"\"\n"},"external_var":false}]}]},{"html_id":"crit/Crit/Models","path":"Crit/Models.html","kind":"module","full_name":"Crit::Models","name":"Models","abstract":false,"locations":[{"filename":"src/models/repository.cr","line_number":6,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/models/repository.cr#L6"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"crit/Crit","kind":"module","full_name":"Crit","name":"Crit"},"types":[{"html_id":"crit/Crit/Models/Repository","path":"Crit/Models/Repository.html","kind":"class","full_name":"Crit::Models::Repository","name":"Repository","abstract":false,"superclass":{"html_id":"crit/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crit/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crit/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/models/repository.cr","line_number":20,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/models/repository.cr#L20"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX_NAME_LENGTH","name":"MAX_NAME_LENGTH","value":"100","doc":"Maximum length for repository names","summary":"<p>Maximum length for repository names</p>"},{"id":"MIN_NAME_LENGTH","name":"MIN_NAME_LENGTH","value":"1","doc":"Minimum length for repository names","summary":"<p>Minimum length for repository names</p>"},{"id":"RESERVED_NAMES","name":"RESERVED_NAMES","value":"[\"new\", \"admin\", \"settings\", \"login\", \"logout\", \"api\"]","doc":"Reserved repository names","summary":"<p>Reserved repository names</p>"},{"id":"VALID_NAME_REGEX","name":"VALID_NAME_REGEX","value":"/^[a-zA-Z0-9_\\-\\.]+$/","doc":"Regular expression for repository name validation","summary":"<p>Regular expression for repository name validation</p>"}],"namespace":{"html_id":"crit/Crit/Models","kind":"module","full_name":"Crit::Models","name":"Models"},"doc":"Repository model class\n\nProvides basic operations for Git repositories such as creation, existence checking, and listing.\nThis class is responsible for the basic management of repositories,\nwhile actual Git operations are handled by the service layer.\n\n## Example\n```\nrepo = Crit::Models::Repository.new(\"my-project\")\nif !repo.exists?\n  repo.create\nend\n```","summary":"<p>Repository model class</p>","class_methods":[{"html_id":"ensure_repo_dir-class-method","name":"ensure_repo_dir","doc":"Ensures the repository directory exists\n\n@return [Boolean] True if the directory exists or was created successfully","summary":"<p>Ensures the repository directory exists</p>","abstract":false,"location":{"filename":"src/models/repository.cr","line_number":128,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/models/repository.cr#L128"},"def":{"name":"ensure_repo_dir","visibility":"Public","body":"begin\n  FileUtils.mkdir_p(Crit::Config::REPO_ROOT)\n  true\nrescue ex\n  Log.error do \"Failed to create repository directory: #{ex.message}\" end\n  false\nend"},"external_var":false},{"html_id":"list-class-method","name":"list","doc":"Lists all repositories\n\n@return [Array<String>] Array of repository names","summary":"<p>Lists all repositories</p>","abstract":false,"location":{"filename":"src/models/repository.cr","line_number":114,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/models/repository.cr#L114"},"def":{"name":"list","visibility":"Public","body":"begin\n  (Dir.entries(Crit::Config::REPO_ROOT))\n    .select do |name| name.ends_with?(\".git\") end\n    .sort\nrescue ex\n  Log.error do \"Failed to list repositories: #{ex.message}\" end\n  [] of String\nend"},"external_var":false}],"constructors":[{"html_id":"new(name:String)-class-method","name":"new","doc":"Initializes a new repository instance\n\n@param name [String] The name of the repository\n@raise [ArgumentError] If the repository name is invalid","summary":"<p>Initializes a new repository instance</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/models/repository.cr","line_number":40,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/models/repository.cr#L40"},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"create-instance-method","name":"create","doc":"Creates a new bare Git repository\n\n@return [Boolean] True if the repository was created successfully, false otherwise\n@return [Boolean] False if the repository already exists","summary":"<p>Creates a new bare Git repository</p>","abstract":false,"location":{"filename":"src/models/repository.cr","line_number":89,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/models/repository.cr#L89"},"def":{"name":"create","visibility":"Public","body":"if exists?\n  return false\nend\n\noutput = IO::Memory.new\nerror = IO::Memory.new\n\nstatus = Process.run(\"git\", [\"init\", \"--bare\", path], output: output, error: error)\n\nif !status.success?\n  error.rewind\n  error_message = error.gets_to_end\n  Log.error do \"Failed to create repository: #{error_message}\" end\nend\n\nstatus.success?\n"},"external_var":false},{"html_id":"exists?-instance-method","name":"exists?","doc":"Checks if the repository exists\n\n@return [Boolean] True if the repository exists, false otherwise","summary":"<p>Checks if the repository exists</p>","abstract":false,"location":{"filename":"src/models/repository.cr","line_number":81,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/models/repository.cr#L81"},"def":{"name":"exists?","visibility":"Public","body":"Dir.exists?(path)"},"external_var":false},{"html_id":"name:String-instance-method","name":"name","doc":"Repository name","summary":"<p>Repository name</p>","abstract":false,"location":{"filename":"src/models/repository.cr","line_number":34,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/models/repository.cr#L34"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"},"external_var":false},{"html_id":"path-instance-method","name":"path","doc":"Returns the full path to the repository\n\n@return [String] The full path to the repository","summary":"<p>Returns the full path to the repository</p>","abstract":false,"location":{"filename":"src/models/repository.cr","line_number":72,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/models/repository.cr#L72"},"def":{"name":"path","visibility":"Public","body":"repo_name = @name.ends_with?(\".git\") ? @name : \"#{@name}.git\"\nFile.join(Crit::Config::REPO_ROOT, repo_name)\n"},"external_var":false}]}]},{"html_id":"crit/Crit/Routes","path":"Crit/Routes.html","kind":"module","full_name":"Crit::Routes","name":"Routes","abstract":false,"locations":[{"filename":"src/routes/git.cr","line_number":6,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/routes/git.cr#L6"},{"filename":"src/routes/web.cr","line_number":8,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/routes/web.cr#L8"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"crit/Crit","kind":"module","full_name":"Crit","name":"Crit"},"types":[{"html_id":"crit/Crit/Routes/Git","path":"Crit/Routes/Git.html","kind":"module","full_name":"Crit::Routes::Git","name":"Git","abstract":false,"locations":[{"filename":"src/routes/git.cr","line_number":11,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/routes/git.cr#L11"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(self)","doc":"Set up a dedicated logger for Git routes","summary":"<p>Set up a dedicated logger for Git routes</p>"}],"namespace":{"html_id":"crit/Crit/Routes","kind":"module","full_name":"Crit::Routes","name":"Routes"},"doc":"Git client routes module\n\nHandles HTTP requests from Git clients for operations like\npush, pull, clone, etc. by forwarding them to git-http-backend.","summary":"<p>Git client routes module</p>","class_methods":[{"html_id":"extract_path_info(env,name)-class-method","name":"extract_path_info","doc":"Extracts path_info from the request URL\n\n@param env [HTTP::Server::Context] The HTTP context\n@param name [String] Repository name\n@return [String] The path info part of the URL","summary":"<p>Extracts path_info from the request URL</p>","abstract":false,"args":[{"name":"env","external_name":"env","restriction":""},{"name":"name","external_name":"name","restriction":""}],"args_string":"(env, name)","args_html":"(env, name)","location":{"filename":"src/routes/git.cr","line_number":47,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/routes/git.cr#L47"},"def":{"name":"extract_path_info","args":[{"name":"env","external_name":"env","restriction":""},{"name":"name","external_name":"name","restriction":""}],"visibility":"Public","body":"if env.request.path.includes?(\"#{name}.git\")\n  env.request.path.not_nil!.sub(/^\\/repo\\/#{name}.git/, \"\")\nelse\n  env.request.path.not_nil!.sub(/^\\/repo\\/#{name}/, \"\")\nend"},"external_var":false},{"html_id":"setup-class-method","name":"setup","doc":"Sets up Git HTTP routes","summary":"<p>Sets up Git HTTP routes</p>","abstract":false,"location":{"filename":"src/routes/git.cr","line_number":16,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/routes/git.cr#L16"},"def":{"name":"setup","visibility":"Public","body":"post(\"/repo/:name/*\") do |env|\n  name = env.params.url[\"name\"]\n  path_info = extract_path_info(env, name)\n\n  Log.debug do \"Handling POST request for repository: #{name}\" end\n  Log.debug do \"Path info: #{path_info}\" end\n\n  cgi_env = Crit::Helpers::CGI.prepare_cgi_env(env, name, path_info)\n  Crit::Helpers::CGI.run_git_http_backend(env, cgi_env)\nend\n\nget(\"/repo/:name/*\") do |env|\n  name = env.params.url[\"name\"]\n  path_info = extract_path_info(env, name)\n\n  Log.debug do \"Handling GET request for repository: #{name}\" end\n  Log.debug do \"Path info: #{path_info}\" end\n\n  cgi_env = Crit::Helpers::CGI.prepare_cgi_env(env, name, path_info)\n  Crit::Helpers::CGI.run_git_http_backend(env, cgi_env)\nend\n"},"external_var":false}]},{"html_id":"crit/Crit/Routes/Web","path":"Crit/Routes/Web.html","kind":"module","full_name":"Crit::Routes::Web","name":"Web","abstract":false,"locations":[{"filename":"src/routes/web.cr","line_number":14,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/routes/web.cr#L14"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"crit/Crit/Routes","kind":"module","full_name":"Crit::Routes","name":"Routes"},"doc":"Web UI routes module\n\nHandles all web interface routes including repository listing,\ncreation, and file/directory browsing. This module is responsible\nfor rendering HTML pages and handling form submissions.","summary":"<p>Web UI routes module</p>","class_methods":[{"html_id":"file_path(base_path,file_name)-class-method","name":"file_path","doc":"Helper method to build file paths\n\n@param base_path [String] The base directory path\n@param file_name [String] The file name to append\n@return [String] The combined path","summary":"<p>Helper method to build file paths</p>","abstract":false,"args":[{"name":"base_path","external_name":"base_path","restriction":""},{"name":"file_name","external_name":"file_name","restriction":""}],"args_string":"(base_path, file_name)","args_html":"(base_path, file_name)","location":{"filename":"src/routes/web.cr","line_number":20,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/routes/web.cr#L20"},"def":{"name":"file_path","args":[{"name":"base_path","external_name":"base_path","restriction":""},{"name":"file_name","external_name":"file_name","restriction":""}],"visibility":"Public","body":"base_path.empty? ? file_name : \"#{base_path}/#{file_name}\""},"external_var":false},{"html_id":"setup-class-method","name":"setup","doc":"Sets up all web routes","summary":"<p>Sets up all web routes</p>","abstract":false,"location":{"filename":"src/routes/web.cr","line_number":39,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/routes/web.cr#L39"},"def":{"name":"setup","visibility":"Public","body":"get(\"/\") do\n  begin\n    repos = Crit::Models::Repository.list\n    render(\"views/index.ecr\", \"views/layout.ecr\")\n  rescue ex\n    Log.error do \"Error rendering index page: #{ex.message}\" end\n    error_response(\"An error occurred while loading repositories\")\n  end\nend\n\n\nget(\"/new\") do\n  begin\n    render(\"views/new.ecr\", \"views/layout.ecr\")\n  rescue ex\n    Log.error do \"Error rendering new repository form: #{ex.message}\" end\n    error_response(\"An error occurred while loading the form\")\n  end\nend\n\n\npost(\"/new\") do |env|\n  begin\n    name = env.params.body[\"name\"]?.to_s.strip\n\n    begin\n      repo = Crit::Models::Repository.new(name)\n    rescue ex : ArgumentError\n      next error_response(ex.message, \"/new\")\n    end\n\n    if repo.exists?\n      next error_response(\"Repository already exists\", \"/new\")\n    end\n\n    if repo.create\n      env.response.headers[\"Location\"] = \"/repo/#{name}\"\n      env.response.status_code = 302\n      \"\"\n    else\n      error_response(\"Failed to create repository\", \"/new\")\n    end\n  rescue ex\n    Log.error do \"Error creating repository: #{ex.message}\" end\n    error_response(\"An unexpected error occurred\", \"/new\")\n  end\nend\n\n\nget(\"/repo/:name\") do |env|\n  begin\n    name = env.params.url[\"name\"]\n\n    begin\n      repo = Crit::Models::Repository.new(name)\n    rescue ex : ArgumentError\n      next error_response(ex.message)\n    end\n\n    if !repo.exists?\n      next error_response(\"Repository not found\", \"/\")\n    end\n\n\n    branches = Crit::Services::RepoService.list_branches(name)\n\n\n    default_branch = if branches.includes?(\"main\")\n      \"main\"\n    elsif branches.includes?(\"master\")\n      \"master\"\n    else\n      branches.first? || \"master\"\n    end\n\n\n    if branches.empty?\n      files = nil\n    else\n      files = Crit::Services::RepoService.list_files(name, default_branch)\n\n\n      if files.nil? && !branches.empty?\n        next error_response(\"Failed to list repository files\", \"/\")\n      end\n    end\n\n    render(\"views/repo.ecr\", \"views/layout.ecr\")\n  rescue ex\n    Log.error do \"Error rendering repository page: #{ex.message}\" end\n    error_response(\"An error occurred while loading repository\", \"/\")\n  end\nend\n\n\nget(\"/repo/:name/tree/:ref/*path\") do |env|\n  begin\n    name = env.params.url[\"name\"]\n    ref = env.params.url[\"ref\"]\n    path = env.params.url[\"path\"]\n\n    begin\n      repo = Crit::Models::Repository.new(name)\n    rescue ex : ArgumentError\n      next error_response(ex.message)\n    end\n\n    if !repo.exists?\n      next error_response(\"Repository not found\", \"/\")\n    end\n\n    files = Crit::Services::RepoService.list_files(name, ref, path)\n    if !files\n      next error_response(\"Path not found or not a directory\", \"/repo/#{name}\")\n    end\n\n\n    parent_path = path.empty? ? \"\" : File.dirname(path)\n    if parent_path == \".\"\n      parent_path = \"\"\n    end\n\n\n    branches = Crit::Services::RepoService.list_branches(name)\n\n    render(\"views/tree.ecr\", \"views/layout.ecr\")\n  rescue ex\n    Log.error do \"Error rendering directory contents: #{ex.message}\" end\n    error_response(\"An error occurred while loading directory\", \"/repo/#{name}\")\n  end\nend\n\n\nget(\"/repo/:name/blob/:ref/*path\") do |env|\n  begin\n    name = env.params.url[\"name\"]\n    ref = env.params.url[\"ref\"]\n    path = env.params.url[\"path\"]\n\n    begin\n      repo = Crit::Models::Repository.new(name)\n    rescue ex : ArgumentError\n      next error_response(ex.message)\n    end\n\n    if !repo.exists?\n      next error_response(\"Repository not found\", \"/\")\n    end\n\n    content = Crit::Services::RepoService.get_file_content(name, ref, path)\n    if !content\n      next error_response(\"File not found\", \"/repo/#{name}\")\n    end\n\n\n    is_binary = (content.includes?(\"\\u0000\")) || content.each_byte.any? do |b| ((b < 32 && (b != 9)) && (b != 10)) && (b != 13) end\n\n\n    parent_path = File.dirname(path)\n    if parent_path == \".\"\n      parent_path = \"\"\n    end\n\n\n    branches = Crit::Services::RepoService.list_branches(name)\n\n    render(\"views/blob.ecr\", \"views/layout.ecr\")\n  rescue ex\n    Log.error do \"Error rendering file content: #{ex.message}\" end\n    error_response(\"An error occurred while loading file\", \"/repo/#{name}\")\n  end\nend\n"},"external_var":false}]}]},{"html_id":"crit/Crit/Services","path":"Crit/Services.html","kind":"module","full_name":"Crit::Services","name":"Services","abstract":false,"locations":[{"filename":"src/services/repo_service.cr","line_number":6,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/services/repo_service.cr#L6"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"crit/Crit","kind":"module","full_name":"Crit","name":"Crit"},"types":[{"html_id":"crit/Crit/Services/RepoService","path":"Crit/Services/RepoService.html","kind":"class","full_name":"Crit::Services::RepoService","name":"RepoService","abstract":false,"superclass":{"html_id":"crit/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"crit/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"crit/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/services/repo_service.cr","line_number":18,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/services/repo_service.cr#L18"}],"repository_name":"crit","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"crit/Crit/Services","kind":"module","full_name":"Crit::Services","name":"Services"},"doc":"Repository service class\n\nProvides Git-specific operations for repositories such as listing files,\ngetting file content, and listing branches. This service layer interacts\nwith Git commands to perform operations on repositories.\n\n## Example\n```\n# List files in a repository\nfiles = Crit::Services::RepoService.list_files(\"my-project\", \"master\")\n```","summary":"<p>Repository service class</p>","class_methods":[{"html_id":"get_file_content(repo_name:String,ref:String=\"master\",path:String=\"\")-class-method","name":"get_file_content","doc":"Gets file content for a specific file in a repository\n\n@param repo_name [String] The name of the repository\n@param ref [String] The Git reference (branch, tag, or commit)\n@param path [String] The path to the file within the repository\n@return [String] The content of the file\n@return [Nil] If the repository or file doesn't exist","summary":"<p>Gets file content for a specific file in a repository</p>","abstract":false,"args":[{"name":"repo_name","external_name":"repo_name","restriction":"String"},{"name":"ref","default_value":"\"master\"","external_name":"ref","restriction":"String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":"String"}],"args_string":"(repo_name : String, ref : String = \"master\", path : String = \"\")","args_html":"(repo_name : String, ref : String = <span class=\"s\">&quot;master&quot;</span>, path : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/services/repo_service.cr","line_number":93,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/services/repo_service.cr#L93"},"def":{"name":"get_file_content","args":[{"name":"repo_name","external_name":"repo_name","restriction":"String"},{"name":"ref","default_value":"\"master\"","external_name":"ref","restriction":"String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":"String"}],"visibility":"Public","body":"begin\n  repo_name = repo_name.ends_with?(\".git\") ? repo_name : \"#{repo_name}.git\"\n  repo_path = File.join(Crit::Config::REPO_ROOT, repo_name)\n  if Dir.exists?(repo_path)\n  else\n    return nil\n  end\n\n\n  if ref.matches?(/^[a-zA-Z0-9_\\-\\.\\/]+$/)\n  else\n    Log.warn do \"Invalid Git reference format: #{ref}\" end\n    return nil\n  end\n\n  if path.matches?(/^[a-zA-Z0-9_\\-\\.\\/]+$/)\n  else\n    Log.warn do \"Invalid path format: #{path}\" end\n    return nil\n  end\n\n  output = IO::Memory.new\n  error = IO::Memory.new\n\n  status = Process.run(\"git\", [\"--git-dir=#{repo_path}\", \"show\", \"#{ref}:#{path}\"], output: output, error: error)\n\n  if !status.success?\n    error.rewind\n    error_message = error.gets_to_end\n    Log.error do \"Failed to get file content: #{error_message}\" end\n    return nil\n  end\n\n\n  output.rewind\n  output.gets_to_end\nrescue ex\n  Log.error do \"Error getting file content: #{ex.message}\" end\n  nil\nend"},"external_var":false},{"html_id":"list_branches(repo_name:String)-class-method","name":"list_branches","doc":"Gets list of branches for a repository\n\n@param repo_name [String] The name of the repository\n@return [Array<String>] Array of branch names\n@return [Array<String>] Empty array if the repository doesn't exist or has no branches","summary":"<p>Gets list of branches for a repository</p>","abstract":false,"args":[{"name":"repo_name","external_name":"repo_name","restriction":"String"}],"args_string":"(repo_name : String)","args_html":"(repo_name : String)","location":{"filename":"src/services/repo_service.cr","line_number":142,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/services/repo_service.cr#L142"},"def":{"name":"list_branches","args":[{"name":"repo_name","external_name":"repo_name","restriction":"String"}],"visibility":"Public","body":"begin\n  repo_name = repo_name.ends_with?(\".git\") ? repo_name : \"#{repo_name}.git\"\n  repo_path = File.join(Crit::Config::REPO_ROOT, repo_name)\n  if Dir.exists?(repo_path)\n  else\n    return [] of String\n  end\n\n  output = IO::Memory.new\n  error = IO::Memory.new\n\n  status = Process.run(\"git\", [\"--git-dir=#{repo_path}\", \"branch\"], output: output, error: error)\n\n  if !status.success?\n    error.rewind\n    error_message = error.gets_to_end\n    Log.error do \"Failed to list branches: #{error_message}\" end\n    return [] of String\n  end\n\n\n  output.rewind\n  branches = [] of String\n\n  output.each_line do |line|\n\n    if line =~ (/^\\*?\\s+(.+)$/)\n      branches << $~[1].strip\n    end\n  end\n\n  branches\nrescue ex\n  Log.error do \"Error listing branches: #{ex.message}\" end\n  [] of String\nend"},"external_var":false},{"html_id":"list_files(repo_name:String,ref:String=\"master\",path:String=\"\")-class-method","name":"list_files","doc":"Gets file listing for a repository at a specific path and reference\n\n@param repo_name [String] The name of the repository\n@param ref [String] The Git reference (branch, tag, or commit)\n@param path [String] The path within the repository\n@return [Array<{type: String, mode: String, hash: String, name: String}>] Array of file entries\n@return [Nil] If the repository or path doesn't exist","summary":"<p>Gets file listing for a repository at a specific path and reference</p>","abstract":false,"args":[{"name":"repo_name","external_name":"repo_name","restriction":"String"},{"name":"ref","default_value":"\"master\"","external_name":"ref","restriction":"String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":"String"}],"args_string":"(repo_name : String, ref : String = \"master\", path : String = \"\")","args_html":"(repo_name : String, ref : String = <span class=\"s\">&quot;master&quot;</span>, path : String = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/services/repo_service.cr","line_number":26,"url":"https://github.com/kojix2/crit/blob/d8e0a8f4207f3ce6445e7e3b02b9bc392e932568/src/services/repo_service.cr#L26"},"def":{"name":"list_files","args":[{"name":"repo_name","external_name":"repo_name","restriction":"String"},{"name":"ref","default_value":"\"master\"","external_name":"ref","restriction":"String"},{"name":"path","default_value":"\"\"","external_name":"path","restriction":"String"}],"visibility":"Public","body":"begin\n  repo_name = repo_name.ends_with?(\".git\") ? repo_name : \"#{repo_name}.git\"\n  repo_path = File.join(Crit::Config::REPO_ROOT, repo_name)\n  if Dir.exists?(repo_path)\n  else\n    return nil\n  end\n\n\n  if ref.matches?(/^[a-zA-Z0-9_\\-\\.\\/]+$/)\n  else\n    Log.warn do \"Invalid Git reference format: #{ref}\" end\n    return nil\n  end\n\n  if path.empty? || (path.matches?(/^[a-zA-Z0-9_\\-\\.\\/]+$/))\n  else\n    Log.warn do \"Invalid path format: #{path}\" end\n    return nil\n  end\n\n\n  path_spec = path.empty? ? \"\" : \"#{path}/\"\n\n  output = IO::Memory.new\n  error = IO::Memory.new\n\n  status = Process.run(\"git\", [\"--git-dir=#{repo_path}\", \"ls-tree\", \"#{ref}:#{path_spec}\"], output: output, error: error)\n\n  if !status.success?\n    error.rewind\n    error_message = error.gets_to_end\n    Log.error do \"Failed to list files: #{error_message}\" end\n    return nil\n  end\n\n\n  output.rewind\n  entries = [] of ::NamedTuple(type: String, mode: String, hash: String, name: String)\n\n  output.each_line do |line|\n\n    if line =~ (/^(\\d+)\\s+(\\w+)\\s+([a-f0-9]+)\\t(.+)$/)\n      mode = $~[1]\n      type = $~[2]\n      hash = $~[3]\n      name = $~[4]\n      entries << {type: type, mode: mode, hash: hash, name: name}\n    end\n  end\n\n  entries\nrescue ex\n  Log.error do \"Error listing files: #{ex.message}\" end\n  nil\nend"},"external_var":false}]}]}]}]}}